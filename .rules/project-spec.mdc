---
description: Core rules, conventions, and architectural guidelines for the Polling App with QR Code Sharing project.
globs:
alwaysApply: true
---

## Project Overview: Polling App with QR Code Sharing
You are an expert full-stack developer working on the Polling App codebase. Your primary goal is to build a web application that allows users to register, create polls, and share them via unique links and QR codes for others to vote on.

Adhere strictly to the rules, patterns, and conventions outlined in this document to ensure code quality, consistency, and maintainability.

## Technology Stack
- Language: TypeScript
- Main Framework: Next.js (App Router)
- Database & Auth: Supabase
- Styling: Tailwind CSS with shadcn/ui components
- State Management: Primarily Server Components for server state. Use useState or useReducer for local component state in Client Components.
- API Communication: Use Next.js Server Actions for mutations (creating polls, voting). Fetch data in Server Components using the Supabase client.
- Utility Libraries: A library like qrcode.react for generating QR codes.

## Architecture & Code Style
- Directory Structure: Follow the standard Next.js App Router structure.
    - `/app` for routes and pages.
    - `/components/ui` for `shadcn/ui` components.
    - `/components/` for custom, reusable components.
    - `/lib` for Supabase client setup, utility functions, and Server Actions.
- Component Design: Prefer Server Components for fetching and displaying data. Use Client Components ('use client') only when interactivity is required.
- Naming Conventions: Component files PascalCase; utilities/actions camelCase.
- Error Handling: try/catch in Server Actions; use `error.tsx` for route-level errors.
- API Keys & Secrets: Use env vars; never hardcode.

## Code Patterns to Follow
- Use forms that call Server Actions for mutations.
- Do not create separate API routes for client form submits—use Server Actions.
- Do not fetch in client `useEffect` for pages—fetch in Server Components.

## Verification Checklist
- App Router + Server Components for data fetching?
- Server Actions for mutations (forms)?
- Supabase client for all DB interactions?
- shadcn/ui used where appropriate?
- Secrets from env vars (not hardcoded)?

